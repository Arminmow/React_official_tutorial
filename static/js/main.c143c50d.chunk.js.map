{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Board","squares","renderSquare","i","Game","info","useState","Array","fill","History","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","current","winner","calculateWinner","moves","map","step","move","desc","JumpTo","history","slice","length","concat","change","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"6LA8DA,SAASA,EAAT,GAAoC,IAAlBC,EAAiB,EAAjBA,MAAQC,EAAS,EAATA,QAMtB,OACI,wBAAQC,UAAU,SAASD,QAASA,EAApC,SACKD,IAKb,SAASG,EAAT,GAAqC,IAApBF,EAAmB,EAAnBA,QAAUG,EAAS,EAATA,QAEvB,SAASC,EAAcC,GACnB,OAAO,cAACP,EAAD,CAAQE,QAAS,kBAAMA,EAAQK,IAAIN,MAAOI,EAAQE,KAI7D,OACI,gCACI,qBAAKJ,UAAU,WACf,sBAAKA,UAAU,YAAf,UACKG,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKH,UAAU,YAAf,UACKG,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKH,UAAU,YAAf,UACKG,EAAa,GACbA,EAAa,GACbA,EAAa,SAM9B,SAASE,IACL,IAOIC,EAPJ,EAA+BC,mBAAS,CAAC,CACrCL,QAASM,MAAM,GAAGC,KAAK,SAD3B,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAA+BJ,oBAAS,GAAxC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAqCN,mBAAS,GAA9C,mBAAOO,EAAP,KAAoBC,EAApB,KACMC,EAAUN,EAAQI,GAClBG,EAASC,EAAgBF,EAAQd,SAGnCI,EADAW,EACO,WAAaA,EAEb,iBAAmBL,EAAS,IAAM,KAqB7C,IAAMO,EAAQT,EAAQU,KAAI,SAACC,EAAOC,GAC9B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACI,6BACI,wBAAQvB,QAAS,kBAT7B,SAAiBsB,GACbN,EAAcM,GACdR,EAAWQ,EAAM,IAAM,GAOQG,CAAOF,IAA9B,SAAsCC,KADjCD,MAMjB,OACI,sBAAKtB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACC,EAAD,CAAOC,QAASc,EAAQd,QAASH,QAAS,SAACK,GAAD,OA9BtD,SAAiBA,GACb,IAAMqB,EAAUf,EAAQgB,MAAM,EAAIZ,EAAY,GAExCZ,EADUuB,EAAQA,EAAQE,OAAQ,GACfzB,QAAQwB,QAC7BR,EAAgBhB,IAAYA,EAAQE,KAGxCF,EAAQE,GAAKQ,EAAU,IAAM,IAC7BC,GAAYD,GACZD,EAAWc,EAAQG,OAAO,CAAC,CAAC1B,QAASA,MACrCa,EAAcU,EAAQE,SAoBmCE,CAAOzB,QAE5D,sBAAKJ,UAAU,YAAf,UACI,8BAAMM,IACN,6BAAKa,UAMrB,SAASD,EAAgBhB,GAWrB,IAVA,IAAM4B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF1B,EAAI,EAAGA,EAAI0B,EAAMH,OAAQvB,IAAK,CACnC,kBAAkB0B,EAAM1B,GAAxB,GAAO2B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,OAAO/B,EAAQ6B,GAGvB,OAAO,KAGXG,IAASC,OAAO,cAAC9B,EAAD,IAAS+B,SAASC,eAAe,W","file":"static/js/main.c143c50d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { useState } from 'react';\n/*\nclass Square extends React.Component {\n    render() {\n        return (\n            <button className='square'>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nclass Board extends React.Component {\n    renderSquare (i){\n        return <Square value={i} />\n    }\n\n    render() {\n        const status = 'Next player: X';\n        return (\n            <div>\n                <div className='status'>{status}</div>\n                <div className='board-row'>\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className='game'>\n                <div className='game-board'>\n                    <Board />\n                </div>\n                <div className='game-info'>\n                    <div>{}</div>\n                    <ol>{}</ol>\n                </div>\n            </div>\n        )\n    }\n}\n */\n\nfunction Square ({value , onClick}){\n    //const [state , setState] = useState('')\n    //function clicked (){\n        //setState('X')\n\n    //}\n    return (\n        <button className='square' onClick={onClick} >\n            {value}\n        </button>\n    )\n}\n\nfunction Board ({onClick , squares}){\n\n    function renderSquare (i){\n        return <Square onClick={() => onClick(i)} value={squares[i]}/>\n    }\n\n\n    return (\n        <div>\n            <div className=\"status\">{/*info*/}</div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    )\n}\n\nfunction Game (){\n    const [History , setHistory] = useState([{\n        squares: Array(9).fill(null),\n    }],)\n    const [xIsNext , setXIsNext] = useState(true);\n    const [stepNumber , setStepNumber] = useState(0)\n    const current = History[stepNumber]\n    const winner = calculateWinner(current.squares);\n    let info;\n    if (winner){\n        info = 'winner: ' + winner;\n    }else {\n        info = 'Next player: ' + (xIsNext? 'X' : 'O')\n    }\n\n    function change (i){\n        const history = History.slice(0 , stepNumber +1);\n        const current = history[history.length -1]\n        const squares  = current.squares.slice()\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = xIsNext ? 'X' : 'O'\n        setXIsNext(!xIsNext)\n        setHistory(history.concat([{squares: squares}]))\n        setStepNumber(history.length)\n    }\n\n    function JumpTo (step){\n        setStepNumber(step)\n        setXIsNext(step% 2 === 0)\n    }\n\n    const moves = History.map((step , move) => {\n        const desc = move ? 'Go to move #' + move : 'GO to game start';\n        return (\n            <li key={move}>\n                <button onClick={() => JumpTo(move)}>{desc}</button>\n            </li>\n        )\n    })\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board squares={current.squares} onClick={(i) => change(i)} />\n            </div>\n            <div className=\"game-info\">\n                <div>{info}</div>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    )\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nReactDOM.render(<Game/>, document.getElementById('root'));\n"],"sourceRoot":""}